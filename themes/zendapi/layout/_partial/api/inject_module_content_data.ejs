<%
let module = page.module;
let mpaths = [];
let modules = page.modules;
let parent = modules[module.parent];
while(parent) {
    mpaths.unshift({
        name: parent.name,
        url: url_for_api_entity(parent.refid)
    });
    parent = modules[parent.parent];
}
let catalog = site.data['api/catalog'];
let moduleIndex = catalog.apimodules;
mpaths.unshift({
    name: moduleIndex.name,
    url: url_for(moduleIndex.url)
});
module.modules.map(function(submodule){
    submodule.url = url_for_api_entity(submodule.refid);
});
module.namespaces.map(function(namespace){
    namespace.url = url_for_api_entity(namespace.refid);
});
module.classes.map(function(cls){
    setup_class_info_obj(cls)
});
module.defines.map(function(macro){
    macro.url = url_for_entity_detail(macro.containerId, macro.id);
    if (macro.params) {
        macro.paramsString = [];
        macro.params.map(function (param)
        {
            macro.paramsString.push(param.defname);
        });
        macro.paramsString = macro.paramsString.join(", ");
    }
});
module.defines.sort(sort_api_entity_by_name);
module.typedefs.map(function(typedef){
    setup_typedef_info_obj(typedef);
});

module.enums.map(function(enumitem){
    enumitem.url = url_for_entity_detail(enumitem.containerId, enumitem.id);
});

module.funcs.map(function(func){
   setup_func_info_obj(func);
//    console.log(func);
});
module.mpaths = mpaths;
%>

window.API_MODULE_CONTENT_DATA = <%- JSON.stringify(module)%>