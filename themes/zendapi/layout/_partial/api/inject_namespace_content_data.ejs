<%
let namespace = page.namespace;
let npaths = [];
let namespaces = page.namespaces;
let parent = namespaces[namespace.parent];
while(parent) {
 let parts = parent.name.split("::");
 npaths.unshift({
  name: parts.pop(),
  url: url_for_api_entity(parent.refid)
 });
 parent = namespaces[parent.parent];
}
let catalog = site.data['api/catalog'];
let namespaceIndex = catalog.apinamespaces;
npaths.unshift({
 name: namespaceIndex.name,
 url: url_for(namespaceIndex.url)
});

namespace.namespaces.map(function(namespace){
   //console.log(namespace)
 namespace.url = url_for_api_entity(namespace.refid);
});
namespace.classes.map(function(cls){
 setup_class_info_obj(cls)
});
namespace.typedefs.map(function(typedef){
 setup_typedef_info_obj(typedef);
});
namespace.enums.map(function(enumitem){
 enumitem.url = url_for_entity_detail(enumitem.containerId, enumitem.id);
});

namespace.funcs.map(function(func){
 setup_func_info_obj(func);
});
namespace.variables.map(function(variable){
 setup_var_info_obj(variable);
});
namespace.npaths = npaths;
%>
window.API_NAMESPACE_CONTENT_DATA = <%- JSON.stringify(namespace)%>