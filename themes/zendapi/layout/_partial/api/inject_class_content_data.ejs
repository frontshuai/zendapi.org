<%
let cls = clone(page.cls);
let classes = page.classes;
let files = page.files;

if (cls.includes) {
    setup_cls_includes(cls);
}
sort_cls_methods(cls);

function setup_cls_includes(cls)
{
    let sincludes = cls.includes;
    cls.includes = includes = sincludes.map(function (include)
    {
        let file = files[include.refid];
        if (file) {
            let path = file.location.file.substring(8);
            let local = true;
            if (!_.startsWith(path, "zapi")) {
                local = false;
            }
            return {
                name: file.location.file.substring(8),
                url: url_for_api_entity(include.refid),
                local: local
            };
        }
        return include;
    });
}

function sort_cls_methods(cls)
{
    let clsSimpleName = cls.simpleName;
    let constructorName = clsSimpleName.replace(/<.*?>/g, '');
    let desctructorName = '~'+constructorName;
    let special = [constructorName, desctructorName];
    let funcsSortProps = ["publicFuncs", "protectedFuncs", "publicStaticFuncs", "protectedStaticFuncs"];
    let attributesSortProps = ["publicAttributes", "protectedAttributes", "publicStaticAttributes", "protectedStaticAttributes"];
    funcsSortProps.map(function (prop)
    {
        if (cls[prop] && is_array(cls[prop])) {
            cls[prop].sort(function (left, right) {
                let leftName = left.simpleName;
                let rightName = right.simpleName;
                if (_.indexOf(special, leftName) != -1 && _.indexOf(special, rightName) != -1) {
                    if (leftName == desctructorName && rightName == constructorName) {
                        return 1;
                    } else if (leftName == constructorName && rightName == desctructorName) {
                        return -1;
                    }
                    return 0;
                } else if (_.indexOf(special, leftName) != -1 && _.indexOf(special, rightName) == -1) {
                    return -1;
                } else if (_.indexOf(special, leftName) == -1 && _.indexOf(special, rightName) != -1) {
                    return 1;
                } else {
                    // 按照字母表排序呢
                    if (leftName < rightName) {
                        return -1;
                    } else if (leftName == rightName) {
                        return 0;
                    } else {
                        return 1;
                    }
                }
            });
        }
    });

    attributesSortProps.map(function (prop)
    {
        if (cls[prop] && is_array(cls[prop])) {
            cls[prop].sort(function (left, right) {
                let leftName = left.simpleName;
                let rightName = right.simpleName;
                // 按照字母表排序呢
                if (leftName < rightName) {
                    return -1;
                } else if (leftName == rightName) {
                    return 0;
                } else {
                    return 1;
                }
            });
        }
    });
}

%>
window.API_CLASS_CONTENT_DATA = <%- JSON.stringify(cls)%>